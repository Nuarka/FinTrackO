# Commands.py
import os
import json
import math
import datetime as dt
from typing import Optional, List, Tuple

from aiogram import Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from Function import (
    get_or_create_user, update_user_settings,
    add_transaction, list_transactions, get_month_summary,
    add_debt, list_debts, close_debt,
    get_rates_for_user,
    get_anchor, set_anchor,
    format_table, monowrap
)

# ---- Config / defaults ----
DEFAULT_CATEGORIES = ["–ü—Ä–æ–¥—É–∫—Ç—ã","–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç","–ö–æ–º–º—É–Ω–∞–ª–∫–∞","–°–≤—è–∑—å","–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ","–ó–¥–æ—Ä–æ–≤—å–µ","–û–¥–µ–∂–¥–∞","–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è","–ü—Ä–æ—á–µ–µ"]
INCOME_CATEGORIES = ["–†–∞–±–æ—Ç–∞","–§—Ä–∏–ª–∞–Ω—Å","–ü–æ–¥–∞—Ä–æ–∫","–ü—Ä–æ—á–µ–µ"]

class TxStates(StatesGroup):
    waiting_amount = State()
    waiting_category = State()
    waiting_note = State()

class DebtStates(StatesGroup):
    waiting_direction = State()
    waiting_counterparty = State()
    waiting_amount = State()
    waiting_note = State()

# ---------- Keyboards ----------
def kb_main():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûñ –†–∞—Å—Ö–æ–¥", callback_data="expense_add"),
         InlineKeyboardButton(text="‚ûï –î–æ—Ö–æ–¥", callback_data="income_add")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã", callback_data="summary"),
         InlineKeyboardButton(text="üóÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history:1")],
        [InlineKeyboardButton(text="üí± –ö—É—Ä—Å", callback_data="rates"),
         InlineKeyboardButton(text="üè¶ –î–æ–ª–≥–∏", callback_data="debts")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
         InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")]
    ])

def kb_cancel():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def kb_categories(for_income: bool):
    items = INCOME_CATEGORIES if for_income else DEFAULT_CATEGORIES
    rows, row = [], []
    for i, c in enumerate(items):
        row.append(InlineKeyboardButton(text=c, callback_data=f"cat:{c}"))
        if len(row) == 3:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="cat:__skip__")])
    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_history(page: int, has_more: bool):
    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"history:{page-1}"))
    if has_more:
        nav.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"history:{page+1}"))
    if not nav:
        nav.append(InlineKeyboardButton(text="‚Üª –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"history:{page}"))
    return InlineKeyboardMarkup(inline_keyboard=[nav, [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]])

def kb_debts(debts_open: List[tuple]):
    rows = []
    for d in debts_open[:10]:
        did, direction, cp, amount, ccy, note, created = d
        label = f"{'–ú–Ω–µ' if direction=='to_me' else '–Ø'}: {cp} ‚Ä¢ {amount:.0f} {ccy}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"debt_close:{did}")])
    rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥", callback_data="debt_add"),
                 InlineKeyboardButton(text="üìú –ó–∞–∫—Ä—ã—Ç—ã–µ", callback_data="debts_closed")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_settings():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞", callback_data="set_base")],
        [InlineKeyboardButton(text="–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã (–¥–æ 5)", callback_data="set_tracked")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")]
    ])

def kb_base_choices():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=x, callback_data=f"base:{x}") for x in ["KZT","USD","RUB","EUR","USDT"]],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

# ---- Helpers: anchor message ----
async def reply_or_edit_anchor(message: Message, text: str, db_path: str, reply_markup: Optional[InlineKeyboardMarkup]=None):
    user_id = message.from_user.id
    anchor_id = get_anchor(db_path, user_id)
    if anchor_id:
        try:
            return await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=anchor_id,
                text=text,
                reply_markup=reply_markup
            )
        except Exception:
            pass
    m = await message.answer(text, reply_markup=reply_markup)
    set_anchor(db_path, user_id, m.message_id)
    return m

async def edit_anchor_from_cb(cb: CallbackQuery, text: str, db_path: str, reply_markup: Optional[InlineKeyboardMarkup]=None):
    user_id = cb.from_user.id
    anchor_id = get_anchor(db_path, user_id)
    if anchor_id:
        try:
            return await cb.message.bot.edit_message_text(
                chat_id=cb.message.chat.id, message_id=anchor_id,
                text=text, reply_markup=reply_markup
            )
        except Exception:
            pass
    set_anchor(db_path, user_id, cb.message.message_id)
    return await cb.message.edit_text(text, reply_markup=reply_markup)

# ---- Registration ----
def register_handlers(dp: Dispatcher, db_path: str):
    r = Router()
    dp.include_router(r)

    # /start
    @r.message(CommandStart())
    async def start_cmd(m: Message, state: FSMContext):
        get_or_create_user(db_path, m.from_user.id)
        await state.clear()
        await reply_or_edit_anchor(m, "–ü—Ä–∏–≤–µ—Ç! –Ø *FinTrack*.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", db_path, kb_main())

    @r.callback_query(F.data == "home")
    async def home_cb(cb: CallbackQuery, state: FSMContext):
        await state.clear()
        await edit_anchor_from_cb(cb, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", db_path, kb_main())
        await cb.answer()

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞
    @r.callback_query(F.data == "cancel")
    async def cancel_cb(cb: CallbackQuery, state: FSMContext):
        await state.clear()
        await edit_anchor_from_cb(cb, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", db_path, kb_main())
        await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

    # –ß–∏—Å—Ç–∫–∞
    @r.callback_query(F.data == "clear")
    async def clear_cb(cb: CallbackQuery):
        for mid in range(cb.message.message_id, cb.message.message_id-20, -1):
            try:
                await cb.message.bot.delete_message(cb.message.chat.id, mid)
            except Exception:
                pass
        await cb.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏).")

    # –°–≤–æ–¥–∫–∞
    @r.callback_query(F.data == "summary")
    async def summary_cb(cb: CallbackQuery):
        mk = dt.datetime.utcnow().strftime("%Y-%m")
        sums = get_month_summary(db_path, cb.from_user.id, mk)
        text = f"*–°–≤–æ–¥–∫–∞ {mk}*\n–î–æ—Ö–æ–¥: {sums['income']:.0f}\n–†–∞—Å—Ö–æ–¥: {sums['expense']:.0f}\n–°–≤–æ–±–æ–¥–Ω–æ: {sums['free']:.0f}"
        await edit_anchor_from_cb(cb, text, db_path, kb_main())
        await cb.answer()

    # –ö—É—Ä—Å—ã
    @r.callback_query(F.data == "rates")
    async def rates_cb(cb: CallbackQuery):
        user = get_or_create_user(db_path, cb.from_user.id)
        base = user["base_ccy"]
        pairs = await get_rates_for_user(db_path, cb.from_user.id)
        if not pairs:
            await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã", show_alert=True); return
        lines = [f"*–ö—É—Ä—Å –∫ {base}:*"] + [f"{base} ‚Üí {q}: {r:.4f}" for q, r in pairs]
        await edit_anchor_from_cb(cb, "\n".join(lines), db_path, kb_main())
        await cb.answer()

    # –ò—Å—Ç–æ—Ä–∏—è
    @r.callback_query(F.data.startswith("history:"))
    async def history_cb(cb: CallbackQuery):
        _, page_s = cb.data.split(":")
        page = max(int(page_s), 1)
        per_page = 8
        mk = dt.datetime.utcnow().strftime("%Y-%m")
        rows = list_transactions(db_path, cb.from_user.id, mk, page, per_page+1)
        has_more = len(rows) > per_page
        rows = rows[:per_page]
        sums = get_month_summary(db_path, cb.from_user.id, mk)
        table = format_table(rows, sums)
        await edit_anchor_from_cb(cb, monowrap(table), db_path, kb_history(page, has_more))
        await cb.answer()

    # –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥/–¥–æ—Ö–æ–¥
    @r.callback_query(F.data == "expense_add")
    async def expense_add(cb: CallbackQuery, state: FSMContext):
        await state.set_state(TxStates.waiting_amount)
        await state.update_data(tx_type="expense")
        await edit_anchor_from_cb(cb, "–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (—á–∏—Å–ª–æ):", db_path, kb_cancel())
        await cb.answer()

    @r.callback_query(F.data == "income_add")
    async def income_add(cb: CallbackQuery, state: FSMContext):
        await state.set_state(TxStates.waiting_amount)
        await state.update_data(tx_type="income")
        await edit_anchor_from_cb(cb, "–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (—á–∏—Å–ª–æ):", db_path, kb_cancel())
        await cb.answer()

    @r.message(TxStates.waiting_amount)
    async def tx_amount(m: Message, state: FSMContext):
        text_raw = (m.text or "").strip()
        try:
            amount = float(text_raw.replace(",", "."))
            if amount <= 0: raise ValueError()
        except Exception:
            try: await m.delete()
            except Exception: pass
            # !!! –≤–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —è–∫–æ—Ä—å, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await reply_or_edit_anchor(m, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", db_path, kb_cancel())
            return
        await state.update_data(amount=amount)
        try: await m.delete()
        except Exception: pass
        data = await state.get_data()
        for_income = data.get("tx_type") == "income"
        await state.set_state(TxStates.waiting_category)
        await reply_or_edit_anchor(m, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", db_path, kb_categories(for_income))

    @r.callback_query(TxStates.waiting_amount, F.data.startswith("cat:"))
    async def tx_category_wrong_cb(cb: CallbackQuery):
        await edit_anchor_from_cb(cb, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏ –û—Ç–º–µ–Ω–∞.", db_path, kb_cancel())
        await cb.answer()

    @r.callback_query(TxStates.waiting_category, F.data.startswith("cat:"))
    async def tx_category(cb: CallbackQuery, state: FSMContext):
        _, cat = cb.data.split(":")
        if cat == "__skip__":
            cat = "–ü—Ä–æ—á–µ–µ"
        await state.update_data(category=cat)
        await state.set_state(TxStates.waiting_note)
        await edit_anchor_from_cb(cb, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)", db_path, kb_cancel())
        await cb.answer()

    @r.message(TxStates.waiting_note)
    async def tx_note(m: Message, state: FSMContext):
        note = (m.text or "").strip()
        if note == "-":
            note = ""
        try: await m.delete()
        except Exception: pass
        data = await state.get_data()
        tx_type = data["tx_type"]
        amount = float(data["amount"])
        category = data["category"]
        u = get_or_create_user(db_path, m.from_user.id)
        add_transaction(db_path, m.from_user.id, tx_type, amount, u["base_ccy"], category, note)
        await state.clear()
        mk = dt.datetime.utcnow().strftime("%Y-%m")
        sums = get_month_summary(db_path, m.from_user.id, mk)
        rows = list_transactions(db_path, m.from_user.id, mk, 1, 8)
        table = format_table(rows, sums)
        await reply_or_edit_anchor(m, monowrap(table), db_path, kb_main())

    # ----- Debts -----
    @r.callback_query(F.data == "debts")
    async def debts_cb(cb: CallbackQuery):
        ds = list_debts(db_path, cb.from_user.id, 'open')
        await edit_anchor_from_cb(cb, "*–¢–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏:*", db_path, kb_debts(ds))
        await cb.answer()

    @r.callback_query(F.data == "debt_add")
    async def debt_add_start(cb: CallbackQuery, state: FSMContext):
        await state.set_state(DebtStates.waiting_direction)
        kbd = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ú–Ω–µ –¥–æ–ª–∂–Ω—ã", callback_data="dir:to_me"),
            InlineKeyboardButton(text="–Ø –¥–æ–ª–∂–µ–Ω", callback_data="dir:from_me")
        ], [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
        await edit_anchor_from_cb(cb, "–ö—Ç–æ –∫–æ–º—É –¥–æ–ª–∂–µ–Ω?", db_path, kbd)
        await cb.answer()

    @r.callback_query(DebtStates.waiting_direction, F.data.startswith("dir:"))
    async def debt_dir(cb: CallbackQuery, state: FSMContext):
        _, direction = cb.data.split(":")
        await state.update_data(direction=direction)
        await state.set_state(DebtStates.waiting_counterparty)
        await edit_anchor_from_cb(cb, "–ò–º—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞?", db_path, kb_cancel())
        await cb.answer()

    @r.message(DebtStates.waiting_counterparty)
    async def debt_cp(m: Message, state: FSMContext):
        await state.update_data(counterparty=(m.text or "").strip())
        try: await m.delete()
        except: pass
        await state.set_state(DebtStates.waiting_amount)
        await reply_or_edit_anchor(m, "–°—É–º–º–∞ –¥–æ–ª–≥–∞?", db_path, kb_cancel())

    @r.message(DebtStates.waiting_amount)
    async def debt_amount(m: Message, state: FSMContext):
        raw = (m.text or "").strip()
        try:
            amount = float(raw.replace(",", "."))
            if amount <= 0: raise ValueError()
        except Exception:
            try: await m.delete()
            except: pass
            await reply_or_edit_anchor(m, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", db_path, kb_cancel())
            return
        await state.update_data(amount=amount)
        try: await m.delete()
        except: pass
        await state.set_state(DebtStates.waiting_note)
        await reply_or_edit_anchor(m, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–∏–ª–∏ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)", db_path, kb_cancel())

    @r.message(DebtStates.waiting_note)
    async def debt_note(m: Message, state: FSMContext):
        note = "" if (m.text or "").strip() == "-" else (m.text or "").strip()
        try: await m.delete()
        except: pass
        data = await state.get_data()
        u = get_or_create_user(db_path, m.from_user.id)
        add_debt(db_path, m.from_user.id, data["direction"], data["counterparty"], float(data["amount"]), u["base_ccy"], note)
        await state.clear()
        ds = list_debts(db_path, m.from_user.id, 'open')
        await reply_or_edit_anchor(m, "*–¢–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏:*", db_path, kb_debts(ds))

    @r.callback_query(F.data.startswith("debt_close:"))
    async def debt_close_cb(cb: CallbackQuery):
        _, did = cb.data.split(":")
        try:
            close_debt(db_path, cb.from_user.id, int(did))
        except Exception:
            await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥", show_alert=True); return
        ds = list_debts(db_path, cb.from_user.id, 'open')
        await edit_anchor_from_cb(cb, "*–¢–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏:*", db_path, kb_debts(ds))
        await cb.answer("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç")

    # ----- Settings -----
    @r.callback_query(F.data == "settings")
    async def settings_cb(cb: CallbackQuery):
        u = get_or_create_user(db_path, cb.from_user.id)
        tracked = json.loads(u["tracked_ccy"]) if u["tracked_ccy"] else []
        text = (f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {u['base_ccy']}\n"
                f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(tracked) if tracked else '‚Äî'}")
        await edit_anchor_from_cb(cb, text, db_path, kb_settings())
        await cb.answer()

    @r.callback_query(F.data == "set_base")
    async def set_base_cb(cb: CallbackQuery):
        await edit_anchor_from_cb(cb, "–í—ã–±–µ—Ä–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:", db_path, kb_base_choices())
        await cb.answer()

    @r.callback_query(F.data.startswith("base:"))
    async def base_save(cb: CallbackQuery):
        _, val = cb.data.split(":")
        update_user_settings(db_path, cb.from_user.id, base_ccy=val)
        await settings_cb(cb)

    @r.callback_query(F.data == "set_tracked")
    async def set_tracked_cb(cb: CallbackQuery):
        all_ccy = ["USD","RUB","EUR","CNY","GBP","USDT","BTC"]
        u = get_or_create_user(db_path, cb.from_user.id)
        cur = set(json.loads(u["tracked_ccy"]) if u["tracked_ccy"] else [])
        rows, row = [], []
        for c in all_ccy:
            mark = "‚úÖ" if c in cur else "‚ûï"
            row.append(InlineKeyboardButton(text=f"{mark} {c}", callback_data=f"track:{c}"))
            if len(row) == 3:
                rows.append(row); row=[]
        if row: rows.append(row)
        rows.append([InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="track_save")])
        rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        await edit_anchor_from_cb(cb, "–í—ã–±–µ—Ä–∏ –¥–æ 5 –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞:", db_path,
                                  InlineKeyboardMarkup(inline_keyboard=rows))
        await cb.answer()

    @r.callback_query(F.data.startswith("track:"))
    async def track_toggle(cb: CallbackQuery):
        _, c = cb.data.split(":")
        u = get_or_create_user(db_path, cb.from_user.id)
        cur = set(json.loads(u["tracked_ccy"]) if u["tracked_ccy"] else [])
        if c in cur:
            cur.remove(c)
        else:
            if len(cur) >= 5:
                await cb.answer("–ù–µ –±–æ–ª–µ–µ 5 –≤–∞–ª—é—Ç", show_alert=True); return
            cur.add(c)
        update_user_settings(db_path, cb.from_user.id, tracked_ccy=list(cur))
        await set_tracked_cb(cb)

    @r.callback_query(F.data == "track_save")
    async def track_save(cb: CallbackQuery):
        await settings_cb(cb)

    # ----- Fallbacks: –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —è–∫–æ—Ä—å, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è -----

    @r.message(StateFilter(TxStates.waiting_category))
    async def warn_choose_option_tx(m: Message):
        try: await m.delete()
        except: pass
        await reply_or_edit_anchor(m, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.", db_path, kb_cancel())

    @r.message(StateFilter(DebtStates.waiting_direction))
    async def warn_choose_option_debt_dir(m: Message):
        try: await m.delete()
        except: pass
        await reply_or_edit_anchor(m, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.", db_path, kb_cancel())

    # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –∂–¥—ë—Ç ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    @r.message()
    async def generic_warn(m: Message):
        try: await m.delete()
        except: pass
        await reply_or_edit_anchor(m, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.", db_path, kb_main())
